package ${packageName}.controller;

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.jyadmin.domain.PageResult;
import com.jyadmin.domain.Result;
import com.jyadmin.annotation.Idempotent;
import com.jyadmin.annotation.RateLimit;
import ${packageName}.domain.${realTableNameUpperCamelCase};
import ${packageName}.model.vo.${realTableNameUpperCamelCase}CreateReqVO;
import ${packageName}.model.vo.${realTableNameUpperCamelCase}QueryReqVO;
import ${packageName}.model.vo.${realTableNameUpperCamelCase}UpdateReqVO;
import ${packageName}.service.${realTableNameUpperCamelCase}Service;
import com.jyadmin.util.DataUtil;
import com.jyadmin.util.PageUtil;
import com.jyadmin.util.ResultUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import java.util.Objects;
import java.util.Set;

/**
 * $tableRemark <br>
 * @author $author <br>
 * @version $version <br>
 * Create by $currTime <br>
 * @description: ${realTableNameUpperCamelCase}Controller <br>
 */
@Slf4j
@Api(value = "${swaggerApiValue}", tags = {"${swaggerApiTag}"})
@RequestMapping("${publicUrl}")
@RestController
public class ${realTableNameUpperCamelCase}Controller {

    @Resource
    private ${realTableNameUpperCamelCase}Service ${realTableNameLowCamelCase}Service;

    @RateLimit @Idempotent
    @ApiOperation(value = "新增${tableRemark}", notes = "")
    @PostMapping("/create")
    @PreAuthorize("@jy.check('${realTableNameLowCamelCase}:create')")
    public Result<Object> doCreate(@RequestBody @Valid ${realTableNameUpperCamelCase}CreateReqVO vo) {
        return ResultUtil.toResult(${realTableNameLowCamelCase}Service.save(BeanUtil.copyProperties(vo, ${realTableNameUpperCamelCase}.class)));
    }

    @RateLimit @Idempotent
    @ApiOperation(value = "更新${tableRemark}", notes = "")
    @PutMapping("/update")
    @PreAuthorize("@jy.check('${realTableNameLowCamelCase}:update')")
    public Result<Object> doUpdate(@RequestBody @Valid ${realTableNameUpperCamelCase}UpdateReqVO vo) {
        ${realTableNameUpperCamelCase} ${realTableNameLowCamelCase} = ${realTableNameLowCamelCase}Service.getById(vo.getId());
        BeanUtil.copyProperties(vo, ${realTableNameLowCamelCase});
        return ResultUtil.toResult(${realTableNameLowCamelCase}Service.updateById(${realTableNameLowCamelCase}));
    }

    @ApiOperation(value = "删除${tableRemark}", notes = "")
    @DeleteMapping("/remove")
    @PreAuthorize("@jy.check('${realTableNameLowCamelCase}:remove')")
    public Result<Object> doRemove(@RequestBody Set<String> ids) {
        return ResultUtil.toResult(${realTableNameLowCamelCase}Service.removeByIds(DataUtil.convertToLongForSet(ids)));
    }

    @ApiOperation(value = "根据ID获取当前${tableRemark}", notes = "")
    @GetMapping("/query/{id}")
    @PreAuthorize("@jy.check('${realTableNameLowCamelCase}:queryById')")
    public Result<Object> doQueryById(@PathVariable String id) {
        return Result.ok(${realTableNameLowCamelCase}Service.getById(id));
    }

    @ApiOperation(value = "分页查询${tableRemark}", notes = "")
    @GetMapping("/query")
    @PreAuthorize("@jy.check('${realTableNameLowCamelCase}:query')")
    public PageResult<${realTableNameUpperCamelCase}> doQueryPage(${realTableNameUpperCamelCase}QueryReqVO vo) {
        return PageUtil.toPageResult(
                this.${realTableNameLowCamelCase}Service.page(new Page<>(vo.getPageNumber(), vo.getPageSize()),
                        new LambdaQueryWrapper<${realTableNameUpperCamelCase}>()
                #foreach($field in $fields)
                #if($field.fieldIgnore == 0)
                #if($field.showQuery == 1)
                    #if($field.formSelectMethod == 'form_select_method_eq')
                            .eq(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_lt')
                            .lt(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_gt')
                            .gt(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_ge')
                            .ge(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_le')
                            .le(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_neq')
                            .ne(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                    #end
                    #if($field.formSelectMethod == 'form_select_method_like')
                        #if($field.javaType.equals('String'))
                            .like(StringUtils.isNotBlank(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                        #else
                            .ne(Objects.nonNull(vo.get${field.realFieldNameUpperCamelCase}()), ${realTableNameUpperCamelCase}::get${field.realFieldNameUpperCamelCase}, vo.get${field.realFieldNameUpperCamelCase}())
                        #end
                    #end
                #end
                #end
                #end
                )
        );
    }
}
