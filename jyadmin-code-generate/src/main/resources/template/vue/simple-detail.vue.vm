<template>
  <el-dialog
    :title="title"
    :visible.sync="tmpVisible"
    :close-on-press-escape="false"
    :close-on-click-modal="false"
    :show-close="false"
    width="30%"
    class="jy-dialog"
  >
    <div
      v-loading="initloading"
      element-loading-text="加载中，请稍后..."
      element-loading-spinner="el-icon-loading"
    >
      <el-descriptions :column="2" border>
  #foreach($field in $fields)
    #if($field.fieldIgnore == 0)
      #if($field.showPage == 1)
        <el-descriptions-item>
          <template slot="label">
            ${field.fieldRemark}
          </template>
          {{ form.${field.realFieldNameLowCamelCase} }}
        </el-descriptions-item>
      #end
    #end
  #end
      </el-descriptions>
    </div>
    <span slot="footer" class="dialog-footer">
      <el-button @click="tmpVisible = false">关 闭</el-button>
    </span>
  </el-dialog>
</template>

<script>
import ${realTableNameLowCamelCase}Api from '@/api/module/${pageViewPath}/${realTableNameLowCamelCase}-api'
export default {
  name: '${realTableNameUpperCamelCase}Detail',
  props: {
    title: {
      type: String,
      default: 'Demo'
    },
    id: {
      type: String,
      default: null
    },
    visible: {
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      tmpVisible: this.visible,
      initloading: false,
      form: {
  #foreach($field in $fields)
    #if($field.fieldIgnore == 0)
      #if($field.showDetail == 1)
      #if($foreach.last)
          ${field.realFieldNameLowCamelCase}: null
      #else
          ${field.realFieldNameLowCamelCase}: null,
      #end
      #end
    #end
  #end
      }
    }
  },
  watch: {
    visible(newVal) {
      this.tmpVisible = newVal
      if (newVal) {
        this.getById(this.id)
      }
    },
    tmpVisible(newVal) {
      this.$emit('update:visible', newVal)
    },
    deep: true
  },
  methods: {
    getById(id) {
      this.initloading = true
      ${realTableNameLowCamelCase}Api.getById(id).then(response => {
        this.initloading = false
        this.form = response.data
      }).catch(e => {
        this.initloading = false
      })
    }
  }
}
</script>

<style scoped>

</style>
